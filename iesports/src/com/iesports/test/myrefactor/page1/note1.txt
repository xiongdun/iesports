	ConcurrentHashMap使用segment来分段和管理锁，
	segment继承自ReentrantLock，因此ConcurrentHashMap使用ReentrantLock来保证线程安全。
	
	Array.asList返回的是Array类内本身的内部类对象
	
	所谓 volatile的措施，就是
	1. 每次从内存中取值，不从缓存中什么的拿值。这就保证了用 volatile修饰的共享变量，每次的更新对于其他线程都是可见的。
	2. volatile保证了其他线程的立即可见性，就没有保证原子性。
	3. 由于有些时候对 volatile的操作，不会被保存，说明不会造成阻塞。不可用与多线程环境下的计数器。
	
	Java一律采用Unicode编码方式，每个字符无论中文还是英文字符都占用2个字节。
	
	java 虚拟机中通常用UTF-16的方式保存一个字符
	ResourceBundle可以帮助读取国际化配置文件properties
	
	getParameter()是获取POST/GET传递的参数值；
	getInitParameter获取Tomcat的server.xml中设置Context的初始化参数
	getAttribute()是获取对象容器中的数据值；
	getRequestDispatcher是请求转发。 
	
	
	一个类中有抽象方法，那么这个类一定是抽象类
	
	两个最基本的java回收算法：复制算法和标记清理算法
                复制算法：两个区域A和B，初始对象在A，继续存活的对象被转移到B。此为新生代最常用的算法
                标记清理：一块区域，标记要回收的对象，然后回收，一定会出现碎片，那么引出
                标记-整理算法：多了碎片整理，整理出更大的内存放更大的对象
	两个概念：新生代和年老代
	                新生代：初始对象，生命周期短的
	                永久代：长时间存在的对象
	整个java的垃圾回收是新生代和年老代的协作，这种叫做分代回收。
	P.S：Serial New收集器是针对新生代的收集器，采用的是复制算法
		Parallel New（并行）收集器，新生代采用复制算法，老年代采用标记整理
		Parallel Scavenge（并行）收集器，针对新生代，采用复制收集算法
		Serial Old（串行）收集器，新生代采用复制，老年代采用标记清理
		Parallel   Old（并行）收集器，针对老年代，标记整理
		CMS收集器，基于标记清理
		G1收集器：整体上是基于标记清理，局部采用复制
	综上：新生代基本采用复制算法，老年代采用标记整理算法。cms采用标记清理算法
	
	String str.subString 其实会重新实例化一个String对象存在堆中
	
	1.从地址栏显示来说
	forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.
	浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.
	redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.
	2.从数据共享来说
	forward:转发页面和转发到的页面可以共享request里面的数据.
	redirect:不能共享数据.
	3.从运用地方来说
	forward:一般用于用户登陆的时候,根据角色转发到相应的模块.
	redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等.
	4.从效率来说
	forward:高.
	redirect:低.
	
	JAVA进程间通信的方法主要有以下几种：
　　（1）管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。
　　（2）命名管道（named pipe）：命名管道克服了管道没有名字的限制，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。
　　（3）信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送 信号给进程本身。
　　（4）消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。
　　（5）共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。
　　（6）内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。
　　（7）信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。
　　（8）套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信
	
	
	
	
	
	