<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
   	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<!-- 
		web.xml加载顺序
		display-name
		context-param
		listener
		filter
		servlet
		welcome-file-list
	 -->
	<display-name>iesports</display-name>
	<!-- Spring和mybatis的配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- param-value 可以配置多个值 -->
		<param-value>
				classpath:spring-mybatis.xml,classpath:spring-mvc.xml
				<!-- classpath:applicationContext-*.xml -->
		</param-value>
	</context-param>
	<!-- 编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- restful 请求过滤器 -->
	<filter>
    	<filter-name>HiddenHttpMethodFilter</filter-name>
    	<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
   		<filter-name>HiddenHttpMethodFilter</filter-name>
    	<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Spring监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- 
		通过这样的方式配置容器对静态资源的访问
		应该会比在spring-mvc.xml中的配置性能更好
		因为是在DispacherServlet前配置，还没有进入核心前端控制器
		所以讲道理性能应该会更好一点
	 -->
	<servlet-mapping>   
	    <servlet-name>default</servlet-name>  
	    <url-pattern>*.jpg</url-pattern>     
	</servlet-mapping>
	<servlet-mapping>   
	    <servlet-name>default</servlet-name>  
	    <url-pattern>*.png</url-pattern>     
	</servlet-mapping> 
	<servlet-mapping>       
	    <servlet-name>default</servlet-name>    
	    <url-pattern>*.js</url-pattern>    
	</servlet-mapping>    
	<servlet-mapping>        
	    <servlet-name>default</servlet-name>       
	    <url-pattern>*.css</url-pattern>      
	</servlet-mapping>
	
	<!-- Spring MVC servlet配置 -->
	<servlet>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/spring-*.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<!--
			此处也可以配置成*.do，对应struts的后缀习惯 
			目前配置为通用版本，使用任何请求标记都可以
		-->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 会话超时配置 -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>
	<!-- 默认进入的页面 -->
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- 出错页面配置 -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>501</error-code>
		<location>/WEB-INF/error/501.jsp</location>
	</error-page>
	<!-- 异常页面配置 -->
	<error-page>
		<exception-type>java.lang.NullException</exception-type>
		<location>/WEB-INF/error/error.jsp</location>
	</error-page>
</web-app>