<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
   	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd    
    http://www.springframework.org/schema/context    
    http://www.springframework.org/schema/context/spring-context-4.1.xsd    
    http://www.springframework.org/schema/mvc    
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 
		spring-mvc注解驱动 
		使用mvc:annotatioin-driven可以省去添加注解映射器和注解适配器
		还默认加载了许多的参数绑定方法，比如json转化解析器的默认参数就是默认加载的
		在实际开发过程使用，mvc驱动的形式
	-->
	<import resource="applicationContext.xml"/>
	<!-- <import resource="applicationContext-activemq.xml"/> -->
	<!-- <import resource="applicationContext-activemq.xml"/> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"></bean> -->
	<!-- 使用这种简写形式，就相当于注册了上面两个bean -->
	<mvc:annotation-driven/>
	<!-- 
		自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器
		对于注解的Handler	可以单个配置，实际开发中建议使用组件扫描
		组件扫描controller、service、dao等包下的相关组件
		
		spring mvc 源码分析
		spring 源码分析
		mybatis 源码分析
	 -->
	<context:component-scan base-package="com.iesports.*"/>

	<!-- 配置HanderMapping 根据beanname找到对应Controller（可以省略） -->
	<!-- <bean class="org.springframework.web.servlet.mvc.support.ControllerBeanNameHandlerMapping"/> -->
	<!-- 配置controller -->
	<!-- <bean name="/hello" class="com.iesports.controller.HelloController"></bean> -->
	<!--用于将对象转换为JSON 避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 从请求和响应读取/编写字符串 -->
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 JSON转换器-->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter"/>
				<ref bean="stringHttpMessageConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 配置视图解析器,定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 视图前缀 -->
		<property name="prefix" value="/jsp/"></property>
		<!-- 视图后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	<!-- 配置freemarker的视图解析器 -->
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
	    <property name="prefix" value="/ftl/" />  
	    <property name="suffix" value=".ftl" />  
	</bean>
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
	</bean>
	
	<!-- 消息来源 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    	<property name="basename" value="locale"></property>
	</bean>

	<!-- 在spring中可以用bean来加载其他任何类，可以有listener,filter,servlet等等
		这样做的好处就是之后有个beanFactory，就可以直接把其他的类写成bean就可以使用，这就是ioc反转控制
	 -->    
	<!-- 自定义拦截器配置 -->  
    <!-- <mvc:interceptors>
    	<bean class="com.iesports.util.Interceptor.LoginInterceptor" />
    </mvc:interceptors> -->
    
    <!-- 
   		注：在这里使用在web.xml配置的方法进行容器对静态资源的访问
   		暂不使用这种方式，是为了提高程序运行的性能
   		但是在这里也不做删除相关配置代码，是为了后续可能的情况，同样是为了更好的比较学习 
   
    	对静态资源文件的访问  方案一 （二选一）
    	如果不进行这项配置，那么在项目启动后，例如.js/.css等静态文件就会被拦截
    	从而无法访问
     -->  
    <!-- <mvc:default-servlet-handler/> -->
    
    <!-- 对静态资源文件的访问  方案二 （二选一）-->  
    <!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
    <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>
    <mvc:resources mapping="/fonts/**" location="/fonts/" cache-period="31556926"/> -->
</beans>